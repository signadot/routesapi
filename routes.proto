syntax = "proto3";

option go_package = "github.com/signadot/routesapi/routesapi-go;routesapi";

package routes;


service Routes {
  // GetWorkloadRoutes returns a set of workload routes, each of which indicates
  // how to direct requests destined to a given baseline workload with a given
  // routing key.
  rpc GetWorkloadRoutes(WorkloadRoutesRequest) returns (GetWorkloadRoutesResponse) {}

  // WatchWorkloadRoutes provides a stream of diff operations which operate on a
  // set of workload routes to maintain the routes in near real time with
  // in-cluster Sandboxes and RouteGroups.
  rpc WatchWorkloadRoutes(WorkloadRoutesRequest) returns (stream WorkloadRouteOp) {}
}


// Common
// ----------------------------------------------------------------------------

// A WorkloadRoute defines for a given baseline and a routing key, the different
// destinations (per port) implemented by one sandbox.
message WorkloadRoute {
  string routing_key = 1;
  // baseline indicates the corresponding baseline workload.
  BaselineWorkload baseline = 2;
  // destination_sandbox indicates the sandbox associated with the destination
  // sandboxed workloads.
  DestinationSandbox destination_sandbox = 3;
  // mappings represents a mapping from a port on the workload to a set of
  // destinations.
  repeated WorkloadPortMapping mappings = 4;
}

// A DestinationSandbox represents a sandbox that implements routes
message DestinationSandbox {
  // Sandbox name
  string name = 1;
}

// A BaselineWorkload identifies a given baseline workload. In the context of a
// WorkloadRoutesRequest, all the fields are optional. In the context of a
// response from the server, all the fields are filled in.
message BaselineWorkload {
  string kind = 1;
  string namespace = 2;
  string name = 3;
}

// WorkloadPortMapping provides a mapping from a port on the workload to a set
// of destinations. The workload port is the same as the target port of a
// kubernetes service matching the workload. Each destination in the response
// corresponds to a sandbox service matching the sandboxed workload.  As a
// result, any of the destinations can be used.
message WorkloadPortMapping {
  uint32 workload_port = 1;
  repeated Location destinations = 2;
}

// Location gives a TCP address as a host, port pair.
message Location {
  string host = 1;
  uint32 port = 2;
}


// GetWorkloadRoutes
// ----------------------------------------------------------------------------

// WorkloadRoutesRequest is a request for a set of WorkloadRoutes, which give
// information about how to route requests when they are intercepted at a given
// workload. Each field is optional and constrains the the set of WorkloadRoutes
// returned accordingly.
//
message WorkloadRoutesRequest {
  // baseline_workload specifies the kind, namespace, and name of the baseline
  // workload to which requests are directed. Each field is optional.
  BaselineWorkload baseline_workload = 1;

  // routing_key specifies the routing key associated with the request.
  string routing_key = 2;

  // destination_sandbox specifies the sandbox associated with the destination
  // sandboxed workloads.
  DestinationSandbox destination_sandbox = 3;
}

// a GetWorkloadRoutesResponse gives the set of WorkloadRoutes which match a
// given WorkloadRoutesRequest.
message GetWorkloadRoutesResponse {
  repeated WorkloadRoute routes = 1;
}


// WatchWorkloadRoutes
// ----------------------------------------------------------------------------

enum WatchOp {
  ADD = 0;
  REMOVE = 1;
  REPLACE = 2;
  // In any WatchWorkloadRoutes rpc call, the returned stream will send at most
  // 1 SYNCED WatchOp, indicating the client has all the information about
  // Sandboxes and RouteGroups available in the cluster. Prior to sending a
  // SYNCED WatchOp, all WatchOps are ADDs.
  SYNCED = 3;
}

// WorkloadRouteOp describes a diff operation against a set of workload routes:
// adding, removing, and replacing WorkloadRoutes are possible. Additionally,
// there is a SYNCED operation to indicate when the client has received all
// relevant WorkloadRoutes.
message WorkloadRouteOp {
  WatchOp op = 1;
  WorkloadRoute route = 2;
}
