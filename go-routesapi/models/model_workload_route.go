/*
Signadot Routes API

The Signadot Routes API provides access to routing rules pertinent to Signadot Sandboxes on a cluster with the Signadot Operator (>= v0.14.2) installed. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// checks if the WorkloadRoute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkloadRoute{}

// WorkloadRoute A WorkloadRoute defines for a given baseline and a routing key, the different destinations (per port) implemented by one sandbox.
type WorkloadRoute struct {
	// The routing key
	RoutingKey string `json:"routingKey"`
	Baseline BaselineWorkload `json:"baseline"`
	DestinationSandbox DestinationSandbox `json:"destinationSandbox"`
	// A mapping from a port on the workload to a set of destinations.
	Mappings []WorkloadPortMapping `json:"mappings,omitempty"`
}

type _WorkloadRoute WorkloadRoute

// NewWorkloadRoute instantiates a new WorkloadRoute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadRoute(routingKey string, baseline BaselineWorkload, destinationSandbox DestinationSandbox) *WorkloadRoute {
	this := WorkloadRoute{}
	this.RoutingKey = routingKey
	this.Baseline = baseline
	this.DestinationSandbox = destinationSandbox
	return &this
}

// NewWorkloadRouteWithDefaults instantiates a new WorkloadRoute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadRouteWithDefaults() *WorkloadRoute {
	this := WorkloadRoute{}
	return &this
}

// GetRoutingKey returns the RoutingKey field value
func (o *WorkloadRoute) GetRoutingKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoutingKey
}

// GetRoutingKeyOk returns a tuple with the RoutingKey field value
// and a boolean to check if the value has been set.
func (o *WorkloadRoute) GetRoutingKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoutingKey, true
}

// SetRoutingKey sets field value
func (o *WorkloadRoute) SetRoutingKey(v string) {
	o.RoutingKey = v
}

// GetBaseline returns the Baseline field value
func (o *WorkloadRoute) GetBaseline() BaselineWorkload {
	if o == nil {
		var ret BaselineWorkload
		return ret
	}

	return o.Baseline
}

// GetBaselineOk returns a tuple with the Baseline field value
// and a boolean to check if the value has been set.
func (o *WorkloadRoute) GetBaselineOk() (*BaselineWorkload, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Baseline, true
}

// SetBaseline sets field value
func (o *WorkloadRoute) SetBaseline(v BaselineWorkload) {
	o.Baseline = v
}

// GetDestinationSandbox returns the DestinationSandbox field value
func (o *WorkloadRoute) GetDestinationSandbox() DestinationSandbox {
	if o == nil {
		var ret DestinationSandbox
		return ret
	}

	return o.DestinationSandbox
}

// GetDestinationSandboxOk returns a tuple with the DestinationSandbox field value
// and a boolean to check if the value has been set.
func (o *WorkloadRoute) GetDestinationSandboxOk() (*DestinationSandbox, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationSandbox, true
}

// SetDestinationSandbox sets field value
func (o *WorkloadRoute) SetDestinationSandbox(v DestinationSandbox) {
	o.DestinationSandbox = v
}

// GetMappings returns the Mappings field value if set, zero value otherwise.
func (o *WorkloadRoute) GetMappings() []WorkloadPortMapping {
	if o == nil || IsNil(o.Mappings) {
		var ret []WorkloadPortMapping
		return ret
	}
	return o.Mappings
}

// GetMappingsOk returns a tuple with the Mappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadRoute) GetMappingsOk() ([]WorkloadPortMapping, bool) {
	if o == nil || IsNil(o.Mappings) {
		return nil, false
	}
	return o.Mappings, true
}

// HasMappings returns a boolean if a field has been set.
func (o *WorkloadRoute) HasMappings() bool {
	if o != nil && !IsNil(o.Mappings) {
		return true
	}

	return false
}

// SetMappings gets a reference to the given []WorkloadPortMapping and assigns it to the Mappings field.
func (o *WorkloadRoute) SetMappings(v []WorkloadPortMapping) {
	o.Mappings = v
}

func (o WorkloadRoute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkloadRoute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["routingKey"] = o.RoutingKey
	toSerialize["baseline"] = o.Baseline
	toSerialize["destinationSandbox"] = o.DestinationSandbox
	if !IsNil(o.Mappings) {
		toSerialize["mappings"] = o.Mappings
	}
	return toSerialize, nil
}

func (o *WorkloadRoute) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"routingKey",
		"baseline",
		"destinationSandbox",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkloadRoute := _WorkloadRoute{}

	err = json.Unmarshal(bytes, &varWorkloadRoute)

	if err != nil {
		return err
	}

	*o = WorkloadRoute(varWorkloadRoute)

	return err
}

type NullableWorkloadRoute struct {
	value *WorkloadRoute
	isSet bool
}

func (v NullableWorkloadRoute) Get() *WorkloadRoute {
	return v.value
}

func (v *NullableWorkloadRoute) Set(val *WorkloadRoute) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadRoute(val *WorkloadRoute) *NullableWorkloadRoute {
	return &NullableWorkloadRoute{value: val, isSet: true}
}

func (v NullableWorkloadRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


