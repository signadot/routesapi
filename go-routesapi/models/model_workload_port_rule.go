/*
Signadot Routes API

The Signadot Routes API provides access to routing rules pertinent to Signadot Sandboxes on a cluster with the Signadot Operator (>= v0.14.2) installed. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the WorkloadPortRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkloadPortRule{}

// WorkloadPortRule WorkloadPortRule provides a mapping from a port on the workload to a set of destinations. The workload port is the same as the target port of a kubernetes service matching the workload. Each destination in the response corresponds to a sandbox service matching the sandboxed workload.  As a result, any of the destinations can be used.
type WorkloadPortRule struct {
	// Workload port
	WorkloadPort *int32 `json:"workloadPort,omitempty"`
	Destinations []Location `json:"destinations,omitempty"`
}

// NewWorkloadPortRule instantiates a new WorkloadPortRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadPortRule() *WorkloadPortRule {
	this := WorkloadPortRule{}
	return &this
}

// NewWorkloadPortRuleWithDefaults instantiates a new WorkloadPortRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadPortRuleWithDefaults() *WorkloadPortRule {
	this := WorkloadPortRule{}
	return &this
}

// GetWorkloadPort returns the WorkloadPort field value if set, zero value otherwise.
func (o *WorkloadPortRule) GetWorkloadPort() int32 {
	if o == nil || IsNil(o.WorkloadPort) {
		var ret int32
		return ret
	}
	return *o.WorkloadPort
}

// GetWorkloadPortOk returns a tuple with the WorkloadPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadPortRule) GetWorkloadPortOk() (*int32, bool) {
	if o == nil || IsNil(o.WorkloadPort) {
		return nil, false
	}
	return o.WorkloadPort, true
}

// HasWorkloadPort returns a boolean if a field has been set.
func (o *WorkloadPortRule) HasWorkloadPort() bool {
	if o != nil && !IsNil(o.WorkloadPort) {
		return true
	}

	return false
}

// SetWorkloadPort gets a reference to the given int32 and assigns it to the WorkloadPort field.
func (o *WorkloadPortRule) SetWorkloadPort(v int32) {
	o.WorkloadPort = &v
}

// GetDestinations returns the Destinations field value if set, zero value otherwise.
func (o *WorkloadPortRule) GetDestinations() []Location {
	if o == nil || IsNil(o.Destinations) {
		var ret []Location
		return ret
	}
	return o.Destinations
}

// GetDestinationsOk returns a tuple with the Destinations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadPortRule) GetDestinationsOk() ([]Location, bool) {
	if o == nil || IsNil(o.Destinations) {
		return nil, false
	}
	return o.Destinations, true
}

// HasDestinations returns a boolean if a field has been set.
func (o *WorkloadPortRule) HasDestinations() bool {
	if o != nil && !IsNil(o.Destinations) {
		return true
	}

	return false
}

// SetDestinations gets a reference to the given []Location and assigns it to the Destinations field.
func (o *WorkloadPortRule) SetDestinations(v []Location) {
	o.Destinations = v
}

func (o WorkloadPortRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkloadPortRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.WorkloadPort) {
		toSerialize["workloadPort"] = o.WorkloadPort
	}
	if !IsNil(o.Destinations) {
		toSerialize["destinations"] = o.Destinations
	}
	return toSerialize, nil
}

type NullableWorkloadPortRule struct {
	value *WorkloadPortRule
	isSet bool
}

func (v NullableWorkloadPortRule) Get() *WorkloadPortRule {
	return v.value
}

func (v *NullableWorkloadPortRule) Set(val *WorkloadPortRule) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadPortRule) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadPortRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadPortRule(val *WorkloadPortRule) *NullableWorkloadPortRule {
	return &NullableWorkloadPortRule{value: val, isSet: true}
}

func (v NullableWorkloadPortRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadPortRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


