/*
Signadot Routes API

The Signadot Routes API provides access to routing rules pertinent to Signadot Sandboxes on a cluster with the Signadot Operator (>= v0.14.2) installed. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// checks if the SandboxedWorkload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SandboxedWorkload{}

// SandboxedWorkload A SandboxedWorkload represents a Fork or a Local workload running in a sandbox.
type SandboxedWorkload struct {
	// The routing key of a Sandbox
	SandboxID string `json:"sandboxID"`
	Baseline BaselineWorkload `json:"baseline"`
}

type _SandboxedWorkload SandboxedWorkload

// NewSandboxedWorkload instantiates a new SandboxedWorkload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSandboxedWorkload(sandboxID string, baseline BaselineWorkload) *SandboxedWorkload {
	this := SandboxedWorkload{}
	this.SandboxID = sandboxID
	this.Baseline = baseline
	return &this
}

// NewSandboxedWorkloadWithDefaults instantiates a new SandboxedWorkload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSandboxedWorkloadWithDefaults() *SandboxedWorkload {
	this := SandboxedWorkload{}
	return &this
}

// GetSandboxID returns the SandboxID field value
func (o *SandboxedWorkload) GetSandboxID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SandboxID
}

// GetSandboxIDOk returns a tuple with the SandboxID field value
// and a boolean to check if the value has been set.
func (o *SandboxedWorkload) GetSandboxIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SandboxID, true
}

// SetSandboxID sets field value
func (o *SandboxedWorkload) SetSandboxID(v string) {
	o.SandboxID = v
}

// GetBaseline returns the Baseline field value
func (o *SandboxedWorkload) GetBaseline() BaselineWorkload {
	if o == nil {
		var ret BaselineWorkload
		return ret
	}

	return o.Baseline
}

// GetBaselineOk returns a tuple with the Baseline field value
// and a boolean to check if the value has been set.
func (o *SandboxedWorkload) GetBaselineOk() (*BaselineWorkload, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Baseline, true
}

// SetBaseline sets field value
func (o *SandboxedWorkload) SetBaseline(v BaselineWorkload) {
	o.Baseline = v
}

func (o SandboxedWorkload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SandboxedWorkload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sandboxID"] = o.SandboxID
	toSerialize["baseline"] = o.Baseline
	return toSerialize, nil
}

func (o *SandboxedWorkload) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sandboxID",
		"baseline",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSandboxedWorkload := _SandboxedWorkload{}

	err = json.Unmarshal(bytes, &varSandboxedWorkload)

	if err != nil {
		return err
	}

	*o = SandboxedWorkload(varSandboxedWorkload)

	return err
}

type NullableSandboxedWorkload struct {
	value *SandboxedWorkload
	isSet bool
}

func (v NullableSandboxedWorkload) Get() *SandboxedWorkload {
	return v.value
}

func (v *NullableSandboxedWorkload) Set(val *SandboxedWorkload) {
	v.value = val
	v.isSet = true
}

func (v NullableSandboxedWorkload) IsSet() bool {
	return v.isSet
}

func (v *NullableSandboxedWorkload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSandboxedWorkload(val *SandboxedWorkload) *NullableSandboxedWorkload {
	return &NullableSandboxedWorkload{value: val, isSet: true}
}

func (v NullableSandboxedWorkload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSandboxedWorkload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


