/*
Signadot Routes API

The Routes API provides access to in-cluster routing configuration set up by  the Signadot Operator. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WorkloadRoutingRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkloadRoutingRule{}

// WorkloadRoutingRule A WorkloadRoutingRule defines for a given baseline and a routing key, a single `DestinationSandbox` and `mappings`. The mappings map each port of the baseline workload with corresponding TCP addresses belonging to the `DestinationSandbox` where traffic is routed instead.
type WorkloadRoutingRule struct {
	// The routing key
	RoutingKey string `json:"routingKey"`
	Baseline BaselineWorkload `json:"baseline"`
	DestinationSandbox DestinationSandbox `json:"destinationSandbox"`
	// A mapping from a port on the workload to a set of destinations.
	Mappings []WorkloadPortMapping `json:"mappings,omitempty"`
}

type _WorkloadRoutingRule WorkloadRoutingRule

// NewWorkloadRoutingRule instantiates a new WorkloadRoutingRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadRoutingRule(routingKey string, baseline BaselineWorkload, destinationSandbox DestinationSandbox) *WorkloadRoutingRule {
	this := WorkloadRoutingRule{}
	this.RoutingKey = routingKey
	this.Baseline = baseline
	this.DestinationSandbox = destinationSandbox
	return &this
}

// NewWorkloadRoutingRuleWithDefaults instantiates a new WorkloadRoutingRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadRoutingRuleWithDefaults() *WorkloadRoutingRule {
	this := WorkloadRoutingRule{}
	return &this
}

// GetRoutingKey returns the RoutingKey field value
func (o *WorkloadRoutingRule) GetRoutingKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoutingKey
}

// GetRoutingKeyOk returns a tuple with the RoutingKey field value
// and a boolean to check if the value has been set.
func (o *WorkloadRoutingRule) GetRoutingKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoutingKey, true
}

// SetRoutingKey sets field value
func (o *WorkloadRoutingRule) SetRoutingKey(v string) {
	o.RoutingKey = v
}

// GetBaseline returns the Baseline field value
func (o *WorkloadRoutingRule) GetBaseline() BaselineWorkload {
	if o == nil {
		var ret BaselineWorkload
		return ret
	}

	return o.Baseline
}

// GetBaselineOk returns a tuple with the Baseline field value
// and a boolean to check if the value has been set.
func (o *WorkloadRoutingRule) GetBaselineOk() (*BaselineWorkload, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Baseline, true
}

// SetBaseline sets field value
func (o *WorkloadRoutingRule) SetBaseline(v BaselineWorkload) {
	o.Baseline = v
}

// GetDestinationSandbox returns the DestinationSandbox field value
func (o *WorkloadRoutingRule) GetDestinationSandbox() DestinationSandbox {
	if o == nil {
		var ret DestinationSandbox
		return ret
	}

	return o.DestinationSandbox
}

// GetDestinationSandboxOk returns a tuple with the DestinationSandbox field value
// and a boolean to check if the value has been set.
func (o *WorkloadRoutingRule) GetDestinationSandboxOk() (*DestinationSandbox, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationSandbox, true
}

// SetDestinationSandbox sets field value
func (o *WorkloadRoutingRule) SetDestinationSandbox(v DestinationSandbox) {
	o.DestinationSandbox = v
}

// GetMappings returns the Mappings field value if set, zero value otherwise.
func (o *WorkloadRoutingRule) GetMappings() []WorkloadPortMapping {
	if o == nil || IsNil(o.Mappings) {
		var ret []WorkloadPortMapping
		return ret
	}
	return o.Mappings
}

// GetMappingsOk returns a tuple with the Mappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadRoutingRule) GetMappingsOk() ([]WorkloadPortMapping, bool) {
	if o == nil || IsNil(o.Mappings) {
		return nil, false
	}
	return o.Mappings, true
}

// HasMappings returns a boolean if a field has been set.
func (o *WorkloadRoutingRule) HasMappings() bool {
	if o != nil && !IsNil(o.Mappings) {
		return true
	}

	return false
}

// SetMappings gets a reference to the given []WorkloadPortMapping and assigns it to the Mappings field.
func (o *WorkloadRoutingRule) SetMappings(v []WorkloadPortMapping) {
	o.Mappings = v
}

func (o WorkloadRoutingRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkloadRoutingRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["routingKey"] = o.RoutingKey
	toSerialize["baseline"] = o.Baseline
	toSerialize["destinationSandbox"] = o.DestinationSandbox
	if !IsNil(o.Mappings) {
		toSerialize["mappings"] = o.Mappings
	}
	return toSerialize, nil
}

func (o *WorkloadRoutingRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"routingKey",
		"baseline",
		"destinationSandbox",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkloadRoutingRule := _WorkloadRoutingRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkloadRoutingRule)

	if err != nil {
		return err
	}

	*o = WorkloadRoutingRule(varWorkloadRoutingRule)

	return err
}

type NullableWorkloadRoutingRule struct {
	value *WorkloadRoutingRule
	isSet bool
}

func (v NullableWorkloadRoutingRule) Get() *WorkloadRoutingRule {
	return v.value
}

func (v *NullableWorkloadRoutingRule) Set(val *WorkloadRoutingRule) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadRoutingRule) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadRoutingRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadRoutingRule(val *WorkloadRoutingRule) *NullableWorkloadRoutingRule {
	return &NullableWorkloadRoutingRule{value: val, isSet: true}
}

func (v NullableWorkloadRoutingRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadRoutingRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


