/*
Signadot Routes API

The Signadot Routes API provides access to routing rules pertinent to Signadot Sandboxes on a cluster with the Signadot Operator (>= v0.14.2) installed. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// checks if the WorkloadPortMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkloadPortMapping{}

// WorkloadPortMapping A WorkloadPortMapping provides a mapping from a port on the workload to a set of destinations. The workload port is the same as the target port of a kubernetes service matching the workload. Each destination in the response corresponds to a sandbox service matching the sandboxed workload.  As a result, any of the destinations can be used.
type WorkloadPortMapping struct {
	// Workload port
	WorkloadPort int32 `json:"workloadPort"`
	Destinations []Location `json:"destinations,omitempty"`
}

type _WorkloadPortMapping WorkloadPortMapping

// NewWorkloadPortMapping instantiates a new WorkloadPortMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadPortMapping(workloadPort int32) *WorkloadPortMapping {
	this := WorkloadPortMapping{}
	this.WorkloadPort = workloadPort
	return &this
}

// NewWorkloadPortMappingWithDefaults instantiates a new WorkloadPortMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadPortMappingWithDefaults() *WorkloadPortMapping {
	this := WorkloadPortMapping{}
	return &this
}

// GetWorkloadPort returns the WorkloadPort field value
func (o *WorkloadPortMapping) GetWorkloadPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.WorkloadPort
}

// GetWorkloadPortOk returns a tuple with the WorkloadPort field value
// and a boolean to check if the value has been set.
func (o *WorkloadPortMapping) GetWorkloadPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkloadPort, true
}

// SetWorkloadPort sets field value
func (o *WorkloadPortMapping) SetWorkloadPort(v int32) {
	o.WorkloadPort = v
}

// GetDestinations returns the Destinations field value if set, zero value otherwise.
func (o *WorkloadPortMapping) GetDestinations() []Location {
	if o == nil || IsNil(o.Destinations) {
		var ret []Location
		return ret
	}
	return o.Destinations
}

// GetDestinationsOk returns a tuple with the Destinations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadPortMapping) GetDestinationsOk() ([]Location, bool) {
	if o == nil || IsNil(o.Destinations) {
		return nil, false
	}
	return o.Destinations, true
}

// HasDestinations returns a boolean if a field has been set.
func (o *WorkloadPortMapping) HasDestinations() bool {
	if o != nil && !IsNil(o.Destinations) {
		return true
	}

	return false
}

// SetDestinations gets a reference to the given []Location and assigns it to the Destinations field.
func (o *WorkloadPortMapping) SetDestinations(v []Location) {
	o.Destinations = v
}

func (o WorkloadPortMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkloadPortMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workloadPort"] = o.WorkloadPort
	if !IsNil(o.Destinations) {
		toSerialize["destinations"] = o.Destinations
	}
	return toSerialize, nil
}

func (o *WorkloadPortMapping) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"workloadPort",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkloadPortMapping := _WorkloadPortMapping{}

	err = json.Unmarshal(bytes, &varWorkloadPortMapping)

	if err != nil {
		return err
	}

	*o = WorkloadPortMapping(varWorkloadPortMapping)

	return err
}

type NullableWorkloadPortMapping struct {
	value *WorkloadPortMapping
	isSet bool
}

func (v NullableWorkloadPortMapping) Get() *WorkloadPortMapping {
	return v.value
}

func (v *NullableWorkloadPortMapping) Set(val *WorkloadPortMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadPortMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadPortMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadPortMapping(val *WorkloadPortMapping) *NullableWorkloadPortMapping {
	return &NullableWorkloadPortMapping{value: val, isSet: true}
}

func (v NullableWorkloadPortMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadPortMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


