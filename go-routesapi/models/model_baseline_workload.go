/*
Signadot Routes API

The Signadot Routes API provides access to routing rules pertinent to Signadot Sandboxes on a cluster with the Signadot Operator (>= v0.14.2) installed. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the BaselineWorkload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaselineWorkload{}

// BaselineWorkload A BaselineWorkload identifies a given baseline workload. In the context of a WorkloadRoutesRequest, all the fields are optional. In the context of a response from the server, all the fields are filled in.
type BaselineWorkload struct {
	// Baseline workload kind (e.g. Deployment, ArgoRollout)
	Kind *string `json:"kind,omitempty"`
	// Baseline workload namespace
	Namespace *string `json:"namespace,omitempty"`
	// Baseline workload name
	Name *string `json:"name,omitempty"`
}

// NewBaselineWorkload instantiates a new BaselineWorkload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaselineWorkload() *BaselineWorkload {
	this := BaselineWorkload{}
	return &this
}

// NewBaselineWorkloadWithDefaults instantiates a new BaselineWorkload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaselineWorkloadWithDefaults() *BaselineWorkload {
	this := BaselineWorkload{}
	return &this
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *BaselineWorkload) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaselineWorkload) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *BaselineWorkload) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *BaselineWorkload) SetKind(v string) {
	o.Kind = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *BaselineWorkload) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaselineWorkload) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *BaselineWorkload) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *BaselineWorkload) SetNamespace(v string) {
	o.Namespace = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BaselineWorkload) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaselineWorkload) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BaselineWorkload) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BaselineWorkload) SetName(v string) {
	o.Name = &v
}

func (o BaselineWorkload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaselineWorkload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableBaselineWorkload struct {
	value *BaselineWorkload
	isSet bool
}

func (v NullableBaselineWorkload) Get() *BaselineWorkload {
	return v.value
}

func (v *NullableBaselineWorkload) Set(val *BaselineWorkload) {
	v.value = val
	v.isSet = true
}

func (v NullableBaselineWorkload) IsSet() bool {
	return v.isSet
}

func (v *NullableBaselineWorkload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaselineWorkload(val *BaselineWorkload) *NullableBaselineWorkload {
	return &NullableBaselineWorkload{value: val, isSet: true}
}

func (v NullableBaselineWorkload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaselineWorkload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


