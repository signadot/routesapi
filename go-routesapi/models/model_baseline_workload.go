/*
Signadot Routes API

The Routes API provides access to in-cluster routing  configuration set up by the Signadot Operator. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// checks if the BaselineWorkload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaselineWorkload{}

// BaselineWorkload A BaselineWorkload identifies a given baseline workload.
type BaselineWorkload struct {
	// Baseline workload kind (e.g. Deployment, ArgoRollout)
	Kind string `json:"kind"`
	// Baseline workload namespace
	Namespace string `json:"namespace"`
	// Baseline workload name
	Name string `json:"name"`
}

type _BaselineWorkload BaselineWorkload

// NewBaselineWorkload instantiates a new BaselineWorkload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaselineWorkload(kind string, namespace string, name string) *BaselineWorkload {
	this := BaselineWorkload{}
	this.Kind = kind
	this.Namespace = namespace
	this.Name = name
	return &this
}

// NewBaselineWorkloadWithDefaults instantiates a new BaselineWorkload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaselineWorkloadWithDefaults() *BaselineWorkload {
	this := BaselineWorkload{}
	return &this
}

// GetKind returns the Kind field value
func (o *BaselineWorkload) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *BaselineWorkload) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *BaselineWorkload) SetKind(v string) {
	o.Kind = v
}

// GetNamespace returns the Namespace field value
func (o *BaselineWorkload) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *BaselineWorkload) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *BaselineWorkload) SetNamespace(v string) {
	o.Namespace = v
}

// GetName returns the Name field value
func (o *BaselineWorkload) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BaselineWorkload) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BaselineWorkload) SetName(v string) {
	o.Name = v
}

func (o BaselineWorkload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaselineWorkload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kind"] = o.Kind
	toSerialize["namespace"] = o.Namespace
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *BaselineWorkload) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kind",
		"namespace",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBaselineWorkload := _BaselineWorkload{}

	err = json.Unmarshal(bytes, &varBaselineWorkload)

	if err != nil {
		return err
	}

	*o = BaselineWorkload(varBaselineWorkload)

	return err
}

type NullableBaselineWorkload struct {
	value *BaselineWorkload
	isSet bool
}

func (v NullableBaselineWorkload) Get() *BaselineWorkload {
	return v.value
}

func (v *NullableBaselineWorkload) Set(val *BaselineWorkload) {
	v.value = val
	v.isSet = true
}

func (v NullableBaselineWorkload) IsSet() bool {
	return v.isSet
}

func (v *NullableBaselineWorkload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaselineWorkload(val *BaselineWorkload) *NullableBaselineWorkload {
	return &NullableBaselineWorkload{value: val, isSet: true}
}

func (v NullableBaselineWorkload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaselineWorkload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


