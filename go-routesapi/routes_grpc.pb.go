// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package routesapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoutesClient is the client API for Routes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutesClient interface {
	// GetWorkloadRoutingRules returns a set of WorkloadRoutingRules, keyed by
	// baseline workload and routing key, each of which contains a
	// destinationSandbox and mappings for each port.  Each request query
	// parameter represents a different filter on the set of returned routing
	// rules.
	//
	// In the response, for each returned `WorkloadRoutingRule`, the
	// `destinationSandbox` represents the override destination to which traffic
	// will be routed in the presence of the associated routing key
	// (https://www.signadot.com/docs/context-propagation). Message queue
	// consumers may use this field to discover if a message is intended for
	// their consumption.
	//
	// `mappings` provide the association between baseline workload ports and
	// corresponding TCP addresses belonging to the `destinationSandbox`. The
	// `mappings` are used by the DevMesh sidecar
	// (https://www.signadot.com/docs/request-routing/devmesh) to implement
	// "Destination Routing", and may not be relevant to clients unless they are
	// implementing request routing in the application layer.
	GetWorkloadRoutingRules(ctx context.Context, in *WorkloadRoutingRulesRequest, opts ...grpc.CallOption) (*GetWorkloadRoutingRulesResponse, error)
	// WatchWorkloadRoutingRules is a reactive version of GetWorkloadRoutingRules
	// that provides a stream of modifications to the set of WorkloadRoutingRules
	// (keyed by the pair baseline, routingKey), in near real-time.
	WatchWorkloadRoutingRules(ctx context.Context, in *WorkloadRoutingRulesRequest, opts ...grpc.CallOption) (Routes_WatchWorkloadRoutingRulesClient, error)
}

type routesClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutesClient(cc grpc.ClientConnInterface) RoutesClient {
	return &routesClient{cc}
}

func (c *routesClient) GetWorkloadRoutingRules(ctx context.Context, in *WorkloadRoutingRulesRequest, opts ...grpc.CallOption) (*GetWorkloadRoutingRulesResponse, error) {
	out := new(GetWorkloadRoutingRulesResponse)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetWorkloadRoutingRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) WatchWorkloadRoutingRules(ctx context.Context, in *WorkloadRoutingRulesRequest, opts ...grpc.CallOption) (Routes_WatchWorkloadRoutingRulesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Routes_ServiceDesc.Streams[0], "/routes.Routes/WatchWorkloadRoutingRules", opts...)
	if err != nil {
		return nil, err
	}
	x := &routesWatchWorkloadRoutingRulesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Routes_WatchWorkloadRoutingRulesClient interface {
	Recv() (*WorkloadRoutingRuleOp, error)
	grpc.ClientStream
}

type routesWatchWorkloadRoutingRulesClient struct {
	grpc.ClientStream
}

func (x *routesWatchWorkloadRoutingRulesClient) Recv() (*WorkloadRoutingRuleOp, error) {
	m := new(WorkloadRoutingRuleOp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RoutesServer is the server API for Routes service.
// All implementations must embed UnimplementedRoutesServer
// for forward compatibility
type RoutesServer interface {
	// GetWorkloadRoutingRules returns a set of WorkloadRoutingRules, keyed by
	// baseline workload and routing key, each of which contains a
	// destinationSandbox and mappings for each port.  Each request query
	// parameter represents a different filter on the set of returned routing
	// rules.
	//
	// In the response, for each returned `WorkloadRoutingRule`, the
	// `destinationSandbox` represents the override destination to which traffic
	// will be routed in the presence of the associated routing key
	// (https://www.signadot.com/docs/context-propagation). Message queue
	// consumers may use this field to discover if a message is intended for
	// their consumption.
	//
	// `mappings` provide the association between baseline workload ports and
	// corresponding TCP addresses belonging to the `destinationSandbox`. The
	// `mappings` are used by the DevMesh sidecar
	// (https://www.signadot.com/docs/request-routing/devmesh) to implement
	// "Destination Routing", and may not be relevant to clients unless they are
	// implementing request routing in the application layer.
	GetWorkloadRoutingRules(context.Context, *WorkloadRoutingRulesRequest) (*GetWorkloadRoutingRulesResponse, error)
	// WatchWorkloadRoutingRules is a reactive version of GetWorkloadRoutingRules
	// that provides a stream of modifications to the set of WorkloadRoutingRules
	// (keyed by the pair baseline, routingKey), in near real-time.
	WatchWorkloadRoutingRules(*WorkloadRoutingRulesRequest, Routes_WatchWorkloadRoutingRulesServer) error
	mustEmbedUnimplementedRoutesServer()
}

// UnimplementedRoutesServer must be embedded to have forward compatible implementations.
type UnimplementedRoutesServer struct {
}

func (UnimplementedRoutesServer) GetWorkloadRoutingRules(context.Context, *WorkloadRoutingRulesRequest) (*GetWorkloadRoutingRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkloadRoutingRules not implemented")
}
func (UnimplementedRoutesServer) WatchWorkloadRoutingRules(*WorkloadRoutingRulesRequest, Routes_WatchWorkloadRoutingRulesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchWorkloadRoutingRules not implemented")
}
func (UnimplementedRoutesServer) mustEmbedUnimplementedRoutesServer() {}

// UnsafeRoutesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutesServer will
// result in compilation errors.
type UnsafeRoutesServer interface {
	mustEmbedUnimplementedRoutesServer()
}

func RegisterRoutesServer(s grpc.ServiceRegistrar, srv RoutesServer) {
	s.RegisterService(&Routes_ServiceDesc, srv)
}

func _Routes_GetWorkloadRoutingRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadRoutingRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetWorkloadRoutingRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetWorkloadRoutingRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetWorkloadRoutingRules(ctx, req.(*WorkloadRoutingRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_WatchWorkloadRoutingRules_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkloadRoutingRulesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoutesServer).WatchWorkloadRoutingRules(m, &routesWatchWorkloadRoutingRulesServer{stream})
}

type Routes_WatchWorkloadRoutingRulesServer interface {
	Send(*WorkloadRoutingRuleOp) error
	grpc.ServerStream
}

type routesWatchWorkloadRoutingRulesServer struct {
	grpc.ServerStream
}

func (x *routesWatchWorkloadRoutingRulesServer) Send(m *WorkloadRoutingRuleOp) error {
	return x.ServerStream.SendMsg(m)
}

// Routes_ServiceDesc is the grpc.ServiceDesc for Routes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Routes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routes.Routes",
	HandlerType: (*RoutesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorkloadRoutingRules",
			Handler:    _Routes_GetWorkloadRoutingRules_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchWorkloadRoutingRules",
			Handler:       _Routes_WatchWorkloadRoutingRules_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "routes.proto",
}
