// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: routes.proto

package routesapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoutesClient is the client API for Routes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutesClient interface {
	// GetWorkloadRoutes returns a set of workload routes, each of which indicates
	// how to direct requests destined to a given baseline workload with a given
	// routing key.
	GetWorkloadRoutes(ctx context.Context, in *WorkloadRoutesRequest, opts ...grpc.CallOption) (*GetWorkloadRoutesResponse, error)
	// WatchWorkloadRoutes provides a stream of diff operations which operate on a
	// set of workload routes to maintain the routes in near real time with
	// in-cluster Sandboxes and RouteGroups.
	WatchWorkloadRoutes(ctx context.Context, in *WorkloadRoutesRequest, opts ...grpc.CallOption) (Routes_WatchWorkloadRoutesClient, error)
}

type routesClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutesClient(cc grpc.ClientConnInterface) RoutesClient {
	return &routesClient{cc}
}

func (c *routesClient) GetWorkloadRoutes(ctx context.Context, in *WorkloadRoutesRequest, opts ...grpc.CallOption) (*GetWorkloadRoutesResponse, error) {
	out := new(GetWorkloadRoutesResponse)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetWorkloadRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) WatchWorkloadRoutes(ctx context.Context, in *WorkloadRoutesRequest, opts ...grpc.CallOption) (Routes_WatchWorkloadRoutesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Routes_ServiceDesc.Streams[0], "/routes.Routes/WatchWorkloadRoutes", opts...)
	if err != nil {
		return nil, err
	}
	x := &routesWatchWorkloadRoutesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Routes_WatchWorkloadRoutesClient interface {
	Recv() (*WorkloadRouteOp, error)
	grpc.ClientStream
}

type routesWatchWorkloadRoutesClient struct {
	grpc.ClientStream
}

func (x *routesWatchWorkloadRoutesClient) Recv() (*WorkloadRouteOp, error) {
	m := new(WorkloadRouteOp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RoutesServer is the server API for Routes service.
// All implementations must embed UnimplementedRoutesServer
// for forward compatibility
type RoutesServer interface {
	// GetWorkloadRoutes returns a set of workload routes, each of which indicates
	// how to direct requests destined to a given baseline workload with a given
	// routing key.
	GetWorkloadRoutes(context.Context, *WorkloadRoutesRequest) (*GetWorkloadRoutesResponse, error)
	// WatchWorkloadRoutes provides a stream of diff operations which operate on a
	// set of workload routes to maintain the routes in near real time with
	// in-cluster Sandboxes and RouteGroups.
	WatchWorkloadRoutes(*WorkloadRoutesRequest, Routes_WatchWorkloadRoutesServer) error
	mustEmbedUnimplementedRoutesServer()
}

// UnimplementedRoutesServer must be embedded to have forward compatible implementations.
type UnimplementedRoutesServer struct {
}

func (UnimplementedRoutesServer) GetWorkloadRoutes(context.Context, *WorkloadRoutesRequest) (*GetWorkloadRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkloadRoutes not implemented")
}
func (UnimplementedRoutesServer) WatchWorkloadRoutes(*WorkloadRoutesRequest, Routes_WatchWorkloadRoutesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchWorkloadRoutes not implemented")
}
func (UnimplementedRoutesServer) mustEmbedUnimplementedRoutesServer() {}

// UnsafeRoutesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutesServer will
// result in compilation errors.
type UnsafeRoutesServer interface {
	mustEmbedUnimplementedRoutesServer()
}

func RegisterRoutesServer(s grpc.ServiceRegistrar, srv RoutesServer) {
	s.RegisterService(&Routes_ServiceDesc, srv)
}

func _Routes_GetWorkloadRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetWorkloadRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetWorkloadRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetWorkloadRoutes(ctx, req.(*WorkloadRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_WatchWorkloadRoutes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkloadRoutesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoutesServer).WatchWorkloadRoutes(m, &routesWatchWorkloadRoutesServer{stream})
}

type Routes_WatchWorkloadRoutesServer interface {
	Send(*WorkloadRouteOp) error
	grpc.ServerStream
}

type routesWatchWorkloadRoutesServer struct {
	grpc.ServerStream
}

func (x *routesWatchWorkloadRoutesServer) Send(m *WorkloadRouteOp) error {
	return x.ServerStream.SendMsg(m)
}

// Routes_ServiceDesc is the grpc.ServiceDesc for Routes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Routes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routes.Routes",
	HandlerType: (*RoutesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorkloadRoutes",
			Handler:    _Routes_GetWorkloadRoutes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchWorkloadRoutes",
			Handler:       _Routes_WatchWorkloadRoutes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "routes.proto",
}
